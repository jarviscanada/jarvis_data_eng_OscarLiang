package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.SecurityOrder;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private final TraderDao traderDao;
  private final AccountDao accountDao;
  private final PositionDao positionDao;
  private final SecurityOrderDao securityOrderDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      PositionDao positionDao, SecurityOrderDao securityOrderDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityOrderDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount.
   * <p>
   * Assumption: to simplify the logic, each trader has only one account where traderId ==
   * accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null.
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {

    if (trader == null || trader.getCountry() == null || trader.getDob() == null
        || trader.getEmail() == null || trader.getFirstName() == null
        || trader.getLastName() == null) {
      throw new IllegalArgumentException("Trader or trader field was null");
    }

    Trader savedTrader = traderDao.save(trader);
    Account account = new Account();
    account.setAmount(0.0);
    account.setTraderId(trader.getId());
    account = accountDao.save(account);

    return new TraderAccountView(savedTrader, account);
  }

  /**
   * A trader can be deleted iff it has no open position and a 0 cash balance
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if tradeId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {

    Account account = validateTraderAccount(traderId);

    if (account.getAmount() > 0) {
      throw new IllegalArgumentException("Cannot delete account with funds");
    }

    List<Position> positions = positionDao.findById(account.getId());
    if (positions.size() > 0) {
      throw new IllegalArgumentException("Cannot delete account with open positions");
    }

    List<SecurityOrder> securityOrders = securityOrderDao.findByAccountId(account.getId());
    securityOrders.forEach(securityOrder -> securityOrderDao.deleteById(securityOrder.getId()));
    accountDao.deleteById(account.getId());
    traderDao.deleteById(traderId);
  }

  /**
   * Deposit a fund into an account by traderId
   *
   * @param traderId must not be null
   * @param fund     must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, and fund is less than or
   *                                  equal to 0
   */
  public Account deposit(Integer traderId, Double fund) {

    Account account = validateTraderAccount(traderId);

    if (fund <= 0) {
      throw new IllegalArgumentException("Cannot deposit a fund of " + fund);
    }

    account.setAmount(account.getAmount() + fund);
    accountDao.updateOne(account);
    return account;
  }

  /**
   * Withdraw a fund from an account by traderId
   *
   * @param traderId must not be null
   * @param fund     must be greater than 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found, and fund is less than or
   *                                  equal to 0
   */
  public Account withdraw(Integer traderId, Double fund) {

    Account account = validateTraderAccount(traderId);

    if (fund <= 0) {
      throw new IllegalArgumentException("Cannot withdraw a fund of " + fund);
    } else if (account.getAmount() - fund < 0) {
      throw new IllegalArgumentException("Insufficient funds: tried to withdraw " + fund +
          " but only had " + account.getAmount());
    }

    account.setAmount(account.getAmount() - fund);
    accountDao.updateOne(account);
    return account;
  }


  /**
   * Helper method to check if trader exists, and if so, return their account
   *
   * @return trader Account
   * @throws IllegalArgumentException if traderId is null or not found
   */
  private Account validateTraderAccount(Integer traderId) {

    if (traderId == null) {
      throw new IllegalArgumentException("Null trader ID");
    }

    if (!traderDao.existsById(traderId)) {
      throw new IllegalArgumentException("Trader not found");
    }

    Optional<Account> checkAccount = accountDao.findByTraderId(traderId);
    if (checkAccount.isPresent()) {
      return checkAccount.get();
    } else {
      // Should never happen as accounts are created along with traders
      throw new IllegalArgumentException("No account found for trader " + traderId);
    }
  }
}
